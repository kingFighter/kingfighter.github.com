<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project euler | eBash]]></title>
  <link href="http://www.lvkaiyang.tk//blog/categories/project-euler/atom.xml" rel="self"/>
  <link href="http://www.lvkaiyang.tk//"/>
  <updated>2013-05-20T12:56:34+08:00</updated>
  <id>http://www.lvkaiyang.tk//</id>
  <author>
    <name><![CDATA[Lv Kaiyang(Kevin Lui)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[project euler problem 48]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/05/20/project-euler-48/"/>
    <updated>2013-05-20T00:10:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/05/20/project-euler-48</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>The series, \(1^1\) + \(2^2\) + \(3^3\) + &hellip; + \(10^{10}\) = 10405071317. 
</p>
<p>
Find the last ten digits of the series, \(1^1\) + \(2^2\) + \(3^3\) + &hellip; + \(1000^{1000}\).
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>对于直接大数据操作的,直接运算即可,不支持的只要对结果用模取最后10位进行操作即可.
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  9110846700
</p>
<p>
Source:<a href="http://sdrv.ms/14mgROV">C++</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 22]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/05/19/project-euler-22/"/>
    <updated>2013-05-19T14:47:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/05/19/project-euler-22</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>Using <a href="http://sdrv.ms/11QtXXL">names.txt</a> (right click and 'Save Link/Target As&hellip;'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
</p>
<p>
For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938  53 = 49714.
</p>
<p>
What is the total of all the name scores in the file?
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>没什么好说的,先读入数据,然后排序,最后进行计算,效率关键在于排序.
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  871198282
</p>
<p>
Source:<a href="http://sdrv.ms/14mgHHl">C++</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 21]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/05/17/project-euler-21/"/>
    <updated>2013-05-17T16:34:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/05/17/project-euler-21</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a  b, then a and b are an amicable pair and each of a and b are called amicable numbers.
</p>
<p>
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
</p>
<p>
Evaluate the sum of all the amicable numbers under 10000.
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">


<p>
  按题意暴力求解,但我们还是能在细节进行一些优化.
</p><ol>
<li>我们只寻找amicable pair numbers中小的数,但相加时把两者都加上.
</li>
<li>getDivisorSum的优化
<ol>
<li>直观的,循环只要到sqrt(n)就行,因为除数是对应的,n = a * b,由反证法易知一数小于等于sqrt(n)，另一数大于等于sqrt(n);
</li>
<li>我们考虑求质数,公式(
                      \ref{ref1}
        ),公式(
        \ref{ref2}
        )明显成立,公式(
        \ref{ref3}
        )左右两边展开相等可证<br/>




<pre class="example">getDivisorSum(p1*p2*..p_n) = 1+ p1 + p2 + ... pn + p1p2 + .. + p(n-1)p(n) + ... + p1p2..pn 
                           = (1 + p1)(1 + p2)...(1 + pn) 
                           = getDivisorSum(p1) * getDivisorSum(p2) * ... * getDivisorSum(pn)
</pre>

</li>
</ol>

</li>
</ol>


\begin{eqnarray}
getDivisorSum(p) = (p + 1)\label{ref1}\\
\end{eqnarray}
\begin{eqnarray}
getDivisorSum(p^i) = 1 + p^2 + ... + p^i = \frac{p^{i+1}-1}{p-1}\label{ref2}\\
\end{eqnarray}
\begin{eqnarray}
getDivisorSum(p1*p2*..p_n) = getDivisorSum(p1) * getDivisorSum(p2) * ...\label{ref3}
\end{eqnarray}

</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  31626
</p>
<p>
Source:<a href="http://sdrv.ms/10Jy5Co">C++</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 18]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/05/06/project-euler-18/"/>
    <updated>2013-05-06T23:38:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/05/06/project-euler-18</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a>
<ul>
<li><a href="#sec-2-1">2.1 Brute Force</a></li>
<li><a href="#sec-2-2">2.2 递归</a>
<ul>
<li><a href="#sec-2-2-1">2.2.1 分析</a></li>
<li><a href="#sec-2-2-2">2.2.2 例子</a></li>
</ul>
</li>
<li><a href="#sec-2-3">2.3 Bottom-Up</a>
<ul>
<li><a href="#sec-2-3-1">2.3.1 分析</a></li>
<li><a href="#sec-2-3-2">2.3.2 例子</a></li>
</ul></li>
</ul>
</li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
</p>


<p style="text-align:center;font-family:courier new;font-size:12pt;"><span style="color:#ff0000;"><b>3</b></span><br />
<span style="color:#ff0000;"><b>7</b></span> 4<br />
2 <span style="color:#ff0000;"><b>4</b></span> 6<br />
8 5 <span style="color:#ff0000;"><b>9</b></span> 3</p>

<p>
That is, 3 + 7 + 4 + 9 = 23.
</p>
<p>
Find the maximum total from top to bottom of the triangle below:
<p style="text-align:center;font-family:courier new;">75<br />
95 64<br />
17 47 82<br />
18 35 87 10<br />
20 04 82 47 65<br />
19 01 23 75 03 34<br />
88 02 77 73 07 63 67<br />
99 65 04 28 06 16 70 92<br />
41 41 26 56 83 40 80 70 33<br />
41 48 72 33 47 32 37 16 94 29<br />
53 71 44 65 25 43 91 52 97 51 14<br />
70 11 33 28 77 73 17 78 39 68 17 57<br />
91 71 52 38 17 14 91 43 58 50 27 29 48<br />
63 66 04 68 89 53 67 30 73 16 69 87 40 31<br />
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</p>

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">


</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Brute Force</h3>
<div class="outline-text-3" id="text-2-1">

<p>直接的方法就是brute force,但对于大数据量时速度会很慢.<br/>
对于n层高,共有 \(\frac{(n+1)n}{2}\) 个数字,由归纳法易知需要穷尽 \(2^{n-1}\) 条路径,每条路径上有n个数字，需要 \(\Theta(2^{n-1}n)\) 的时间, 易知数字总数m = \(\frac{(n + 2)(n + 1)}{2}\) ,则 m = \(\frac{\sqrt{1+8m}-3}{2}\),代入其中即得关于输入个数m的时间复杂度.
</p></div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> 递归</h3>
<div class="outline-text-3" id="text-2-2">


</div>

<div id="outline-container-2-2-1" class="outline-4">
<h4 id="sec-2-2-1"><span class="section-number-4">2.2.1</span> 分析</h4>
<div class="outline-text-4" id="text-2-2-1">

<p>    \(p_{i}\) 为第i个数字到最末层相邻数字相加最大值, \(a_{i}\) 为第i个数字的值, \(i\in(0,\frac{(n + 1)(n + 2)}{2})\) <br/>
    题目所求为 \(p_{0}\) 的值，易知 \(p_{0}\) = max(\(p_{1}\), \(p_{2}\)) + \(a_{0}\) , \(p_{1}\) = max(\(p_{3}\), \(p_{4}\)) + \(a_{1}\) ,&hellip;<br/>
    设共有n层高(从0开始),则对于i层(第 \(\frac{(i + 1)i}{2}\) ~ \(\frac{(i + 1)i}{2} + i\) 个数),以下等式成立:<br/>
    \(p_{j}\) = max(\(p_{j + i + 1}\), \(p_{j + i + 2}\)) + \(a_{j}\)  j \(\in[\frac{(i + 1)i}{2}\) , \(\frac{(i + 1)i}{2} + i]\) <br/>
    \(p_{j}\) = \(a_{j}\)  j \(\in[\frac{(n + 1)n}{2}\) , \(\frac{(n + 1)n}{2} + n]\) <br/>
    对于n层高,其时间复杂度为 \(\Theta(\frac{(n+1)n}{2})\),易知数字总数m = \(\frac{(n + 2)(n + 1)}{2}\) ,则转换知对于输入个数m,其时间复杂度为 \(\Theta(m)\)
</p></div>

</div>

<div id="outline-container-2-2-2" class="outline-4">
<h4 id="sec-2-2-2"><span class="section-number-4">2.2.2</span> 例子</h4>
<div class="outline-text-4" id="text-2-2-2">

<p>对于原题中的例子其递归调用过程如下:
</p>
<p class="verse">
\(p_0\) = max(\(p_1\), \(p_2\)) + 3<br/>
\(p_1\) = max(\(p_3\), \(p_4\)) + 7<br/>
\(p_3\) = max(\(p_6\), \(p_7\)) + 2<br/>
\(p_6\) = 8<br/>
\(p_7\) = 5<br/>
\(p_3\) = 8 + 2 = 10<br/>
\(p_4\) = max(\(p_7\), \(p_8\)) + 4<br/>
\(p_8\) = 9<br/>
\(p_4\) = 9 + 4 = 13<br/>
\(p_1\) = 9 + 4 + 7 = 20<br/>
\(p_2\) = max(\(p_4\), \(p_5\)) + 4<br/>
\(p_5\) = max(\(p_8\), \(p_9\)) + 6<br/>
\(p_9\) = 3<br/>
\(p_5\) = 9 + 6 = 15<br/>
\(p_2\) = 9 + 6 + 4 = 19<br/>
\(p_0\) = 9 + 4 + 7 + 3 = 23<br/>
</p>


<p>
可以近似把所有数字看作一棵树,则为前序遍历,后序计算
</p></div>
</div>

</div>

<div id="outline-container-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Bottom-Up</h3>
<div class="outline-text-3" id="text-2-3">


</div>

<div id="outline-container-2-3-1" class="outline-4">
<h4 id="sec-2-3-1"><span class="section-number-4">2.3.1</span> 分析</h4>
<div class="outline-text-4" id="text-2-3-1">

<p>我们将上述递归算法转换为迭代,过程如下: <br/>
第n层时, \(p_{j}\) = \(a_{j}\)  j \(\in[\frac{(n + 1)n}{2}\) , \(\frac{(n + 1)n}{2} + n]\) <br/>
第i层, \(p_{j}\) = max(\(p_{j + i + 1}\), \(p_{j + i + 2}\)) + \(a_{j}\)  j \(\in[\frac{(i + 1)i}{2}\) , \(\frac{(i + 1)i}{2} + i]\) <br/>
与递归大抵类似.
</p>
<p>
对于输入个数n,其时间复杂度与递归类似为 \(\Theta(n)\), 如果 \(p_i\) 与 \(a_i\) 使用同一数组,则其空间复杂度为 \(\Theta(1)\)
</p></div>

</div>

<div id="outline-container-2-3-2" class="outline-4">
<h4 id="sec-2-3-2"><span class="section-number-4">2.3.2</span> 例子</h4>
<div class="outline-text-4" id="text-2-3-2">

<p>其计算过程如下:
</p>


<pre class="example">   3                3             3          23
  7 4             7  4         20   19  
 2 4 6    -&gt;    10 13 15   -&gt;           -&gt;  
8 5 9 3       
</pre>

</div>
</div>
</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  1074
</p>
<p>
Source:<a href="http://sdrv.ms/18WJuTc">C++迭代</a> <a href="http://sdrv.ms/18WJyCn">C++递归</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 17]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/05/05/project-euler-17/"/>
    <updated>2013-05-05T11:09:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/05/05/project-euler-17</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
</p>
<p>
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
</p>

<p>
NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>我们知道&lt;1000的都可由,one,two&hellip;ninteen,twenty,thirty&hellip;ninety,hundred,and 这些英文字母表达出来，并将one~nineteen的字母数保存在数组 <code>a[19]={3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8}</code> 中，twenty,thirty..ninety的字母数保存在数组 <code>b[8]＝{6, 6, 5, 5, 5, 7, 6, 6}</code> 中，简单分类计算sum：
</p>
<ol>
<li>\(i\in[1,20)\) <br/>
            sum = sum+ a[i - 1]
</li>
<li>\(i\in[20,100)\)
<ol>
<li>sum = sum + b[i / 10 - 2]   \(i\in\) {20,30,..90}
</li>
<li>sum = sum + b[i / 10 - 2] + a[i % 10 - 1] \(i\in\) {21,22,&hellip;99}
</li>
</ol>

</li>
<li>\(i\in[100,1000)\)
<ol>
<li>sum = sum + a[i / 100 - 1] + len("hundred")  \(i\in\) {100,200,300..900}
</li>
<li>sum = sum + a[i / 100 - 1] + len("hundred") + len("and") + a[i % 100 - 1]; \(i\in\) {101-119,201-219,&hellip;901-919}
</li>
<li>sum = sum + a[i / 100 - 1] + len("hundred") + len("and") + b[i / 10 % 10 - 2]; \(i\in\) {120,130,140..990}
</li>
<li>sum = sum + a[i / 100 - 1] + len("hundred") + len("and") + a[i % 10 - 1] + b[i / 10 % 10 - 2]; \(i\in\) {121,122&hellip;999}
</li>
</ol>

</li>
<li>\(i = 1000\) <br/>
   sum = sum + len("one") + len("thousand");
</li>
</ol>

</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  21124
</p>
<p>
Source:<a href="http://sdrv.ms/12afIbb">C++</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
</feed>

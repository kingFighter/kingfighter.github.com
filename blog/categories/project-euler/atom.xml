<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project euler | eBash]]></title>
  <link href="http://www.lvkaiyang.tk//blog/categories/project-euler/atom.xml" rel="self"/>
  <link href="http://www.lvkaiyang.tk//"/>
  <updated>2014-02-12T16:27:59+08:00</updated>
  <id>http://www.lvkaiyang.tk//</id>
  <author>
    <name><![CDATA[Lv Kaiyang(Kevin Lui)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[project euler problem 40]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/08/28/project-euler-40/"/>
    <updated>2013-08-28T21:51:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/08/28/project-euler-40</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>An irrational decimal fraction is created by concatenating the positive integers:
</p>
<p>
0.123456789101112131415161718192021&hellip;
</p>
<p>
It can be seen that the \(12^{th}\) digit of the fractional part is 1.
</p>
<p>
If dn represents the nth digit of the fractional part, find the value of the following expression.
</p>


\begin{eqnarray*}
d_{1} × d_{10} × d_{100} × d_{1000} × d_{10000} × d_{100000} × d_{1000000}
\end{eqnarray*}

</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>二分法,我们无法直接得知第ith的digit,但是容易知道number n所在的位置.要找ith的digit,其必夹在1~i number之间的某个位置.如：
</p>
<p>
找1000th的digit
</p><ol>
<li>其必夹在1~1000 number之间,易知 (1 + 1000) / 2 = 500 的最后一位0在序列中的位置为1392th(number 11的最后一位1的位置为13),比1000th大,则必在1~499间
</li>
<li>如此往复,我们可以找到最接近的number 370,其最后一位0为1002th,则1000th为digit 3
</li>
</ol>


<p>
依此法可以找到任意ith的digit
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  210
</p>
<p>
Source:<a href="http://sdrv.ms/1cjMvR3">C++</a>
</p>





</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 37]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/08/26/project-euler-37/"/>
    <updated>2013-08-26T23:38:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/08/26/project-euler-37</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
</p>
<p>
Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
</p>
<p>
NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>brute force
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  748317
</p>
<p>
Source:<a href="http://sdrv.ms/17eVSQE">C++</a>
</p>




</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 27]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/06/14/project-euler-27/"/>
    <updated>2013-06-14T23:31:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/06/14/project-euler-27</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>Euler discovered the remarkable quadratic formula:
</p>
<p>
n² + n + 41
</p>
<p>
It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.
</p>
<p>
The incredible formula  n² - 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, -79 and 1601, is -126479.
</p>
<p>
Considering quadratics of the form:
</p>
<p>
n² + an + b, where |a| &lt; 1000 and |b| &lt; 1000
</p>
<p>
where |n| is the modulus/absolute value of n <br/>
e.g. |11| = 11 and |-4| = 4 
</p>
<p>
Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p> Brute Force,当然如果n为0时,可知b必为素数.还可以试图代入n = 1等,得出a,b相应性质,减小复杂度
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  -59231
</p>
<p>
Source:<a href="http://sdrv.ms/12MpHJ9">C++</a>
</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 35]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/06/14/project-euler-35/"/>
    <updated>2013-06-14T22:44:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/06/14/project-euler-35</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a></li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>  The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
</p>
<p>
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
</p>
<p>
How many circular primes are there below one million?
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">

<p>  brute force,没什么好说的
</p></div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  55
</p>
<p>
Source:<a href="http://sdrv.ms/12MpN3F">C++</a>
</p></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[project euler problem 36]]></title>
    <link href="http://www.lvkaiyang.tk//blog/2013/06/10/project-euler-36/"/>
    <updated>2013-06-10T20:24:00+08:00</updated>
    <id>http://www.lvkaiyang.tk//blog/2013/06/10/project-euler-36</id>
    <content type="html"><![CDATA[<p></p></p>

<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Problem</a></li>
<li><a href="#sec-2">2 Solution</a>
<ul>
<li><a href="#sec-2-1">2.1 Brute Force</a></li>
<li><a href="#sec-2-2">2.2 Generate</a></li>
</ul>
</li>
<li><a href="#sec-3">3 Answer</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Problem</h2>
<div class="outline-text-2" id="text-1">

<blockquote>

<p>  The decimal number, 585 = \(1001001001_2\) (binary), is palindromic in both bases.
</p>
<p>
Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
</p>
<p>
(Please note that the palindromic number, in either base, may not include leading zeros.)
</p>
</blockquote>


</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Solution</h2>
<div class="outline-text-2" id="text-2">


</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Brute Force</h3>
<div class="outline-text-3" id="text-2-1">

<p>   因为任何进制数字开头不能为0,则二进制表示时最低位必为1,故数字必为奇数.<br/>
   接下来只要对所有范围内的奇数进行回文数检查即可.<br/>
   检查方法:
</p><ol>
<li>将数字每位分解,相应位对比是否相同(121,第一位和第三位比较)
</li>
<li>将数字倒过来写,比较与原数是否相等(123,反过来即321不等)

<p>
      主要利用整除与模,类似于进制间的转换
</p></li>
</ol>

</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Generate</h3>
<div class="outline-text-3" id="text-2-2">

<p>   直接在范围内产生要求的二进制回文数,再检查是否为十进制的回文数.检查方法同 Brute Force<br/>
   每个数可生成两个回文数: 01 -&gt; 0110 or 010 <br/>
   具体操作主要用整除与模,对于二进制来说则有更快捷的shift等位操作.
</p></div>
</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Answer</h2>
<div class="outline-text-2" id="text-3">

<p>  872187
</p>
<p>  
Source:<a href="http://sdrv.ms/17DumxU">C++</a>
</p>



</div>
</div>

]]></content>
  </entry>
  
</feed>
